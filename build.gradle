buildscript {
    ext {
        kotlinVersion = '1.3.20'
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.21.0")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'com.example.consumer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter')
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")

    // Json Parser dependency
    implementation("com.jayway.jsonpath:json-path:2.4.0")

    implementation("org.springframework.kafka:spring-kafka")


    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.2.0")
    testImplementation("io.mockk:mockk:1.8.9.kotlin13")

    testImplementation("org.springframework.kafka:spring-kafka-test:2.2.4.RELEASE")

}

docker {
    name "${bootJar.baseName}"
    copySpec.from(tasks.bootJar.outputs).into("jars")
    buildArgs(['JAR_FILE': "jars/${bootJar.archiveName}"])
}